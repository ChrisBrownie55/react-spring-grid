{"version":3,"file":"index.umd.js","sources":["../components/Item.tsx","../components/Grid.tsx"],"sourcesContent":["import React from 'react'\nimport { useSpring, useTransition } from 'react-spring'\nimport { ObjectOf, UnwrapArray } from '../generics'\n\ntype style = UnwrapArray<ReturnType<typeof useTransition>>['props']\n\nexport interface RendererProps<T> extends ObjectOf<any> {\n  data: T\n  style: style\n}\n\nexport interface Props<T> {\n  renderer: React.ComponentType<RendererProps<T>>\n  data: T\n  x: number\n  y: number\n  style: style\n}\n\nexport function Item<T>({ renderer: Renderer, data, style, x, y }: Props<T>) {\n  const position = useSpring({\n    left: `${x}px`,\n    top: `${y}px`\n  })\n\n  return <Renderer data={data} style={{ ...style, ...position }} />\n}\n","import React, { useRef } from 'react'\nimport { useTransition } from 'react-spring'\nimport useMeasure from 'use-measure'\n\nimport { Item, Props as ItemProps } from './Item'\nimport { ObjectOf, Component } from '../generics'\n\ntype useTransitionParams = Parameters<typeof useTransition>\nexport interface RequiredItemFields {\n  width: number\n  height: number\n}\n\nexport interface Props<T extends RequiredItemFields> extends ObjectOf<any> {\n  items: T[]\n  keys: useTransitionParams[1]\n  renderer: ItemProps<T>['renderer']\n  wrapper?: Component\n}\n\nexport function Grid<T extends RequiredItemFields>({\n  items,\n  keys,\n  renderer: ItemRenderer,\n  wrapper: Component = 'section',\n  style,\n  ...props\n}: Props<T>) {\n  const transition = useTransition<T, React.CSSProperties>(items, keys, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 }\n  })\n\n  const containerRef = useRef(null)\n  const { width: containerWidth } = useMeasure(containerRef)\n\n  let x = items.length || -items[0].width\n  let y = 0\n  let tallestInRow = 0\n\n  return (\n    <Component\n      ref={containerRef}\n      style={{ ...style, position: 'relative' }}\n      {...props}\n    >\n      {transition.map(({ item, key, props }, index) => {\n        x += item.width\n        if (item.height > tallestInRow) {\n          tallestInRow = item.height\n        }\n\n        if (\n          index + 1 < items.length &&\n          x + items[index + 1].width > containerWidth\n        ) {\n          y += tallestInRow\n          tallestInRow = 0\n        }\n\n        return (\n          <Item<T>\n            key={key}\n            renderer={ItemRenderer}\n            data={item}\n            style={props}\n            x={x}\n            y={y}\n          />\n        )\n      })}\n    </Component>\n  )\n}\n"],"names":["Item","ref","position","useSpring","left","top","React","Renderer","data","style","Object","transition","useTransition","items","keys","from","opacity","enter","leave","containerRef","useRef","useMeasure","x","length","width","y","tallestInRow","Component","props","map","index","item","height","containerWidth","key","renderer","ItemRenderer"],"mappings":"yZAmBgBA,EAAQC,uCAChBC,EAAWC,YAAU,CACzBC,cACAC,sBAGKC,gBAACC,GAASC,KAAMA,EAAMC,MAAOC,iBAAKD,EAAUP,qBCLFD,kEAI5B,sMAIfU,EAAaC,gBAAsCC,EAAOC,EAAM,CACpEC,KAAM,CAAEC,QAAS,GACjBC,MAAO,CAAED,QAAS,GAClBE,MAAO,CAAEF,QAAS,KAGdG,EAAeC,SAAO,QACMC,EAAWF,SAEzCG,EAAIT,EAAMU,SAAWV,EAAM,GAAGW,MAC9BC,EAAI,EACJC,EAAe,SAGjBpB,gBAACqB,iBACC1B,IAAKkB,EACLV,MAAOC,iBAAKD,GAAOP,SAAU,cACzB0B,GAEHjB,EAAWkB,aAAK5B,EAAsB6B,uBACrCR,GAAKS,EAAKP,MACNO,EAAKC,OAASN,IAChBA,EAAeK,EAAKC,QAIpBF,EAAQ,EAAIjB,EAAMU,QAClBD,EAAIT,EAAMiB,EAAQ,GAAGN,MAAQS,IAE7BR,GAAKC,EACLA,EAAe,GAIfpB,gBAACN,GACCkC,UACAC,SAAUC,EACV5B,KAAMuB,EACNtB,cACAa,EAAGA,EACHG,EAAGA"}